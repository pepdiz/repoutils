#!/bin/bash
# autor: Pep Diz
# licencia: GPL v2
#
# genera un repositorio, un fichero que contiene un listado de ficheros del repositorio agrupados por categorias
# actualmente se espera que el listado consista en modulos porteus (ficheros .mdz)
#
# consideraciones:
# - no se guarda el contenido de los directorios, solo su nombre
# - cada fichero puede tener asociado un fichero oculto .info con metadatos
#     ej, el fichero arduino.zip puede tener un .arduino.zip.info
#	el fichero .info puede definir las variables CAT, DES, VER (categoria, descripcion y version)
#	el fichero .info puede definir otras variables que NO aparecen en el repositorio
# - el repositorio se guarda en un fichero de nombre .repo
# - se añaden todos los ficheros existentes, salvo los filtrados 
#	(es responsabilidad del usuario que solo haya modulos en el directorio o que se filtren los no deseados) 
#       (otra opcion sería que solo se incluyesen los modulos, pero de esta manera es más flexible)
#
# repofic:
#  tipo:md5:nombre:version:descripcion:categoria
# tipo = d (directorio) | f (fichero)  [ uso futuro, hoy todos deberian ser f]
# md5 = md5sum (fichero)
# nombre = nombre del fichero completo con extensión (sin path)
# version = la version del fichero (si existe), se lee del propio nombre de fichero o del .fichero.info
# descripcion = una breve descripcion, se lee del .fichero.info (si existe)
# categoria = clasificion de ficheros (opcional), se lee de .fichero.info
#
# 
# vars:
#  FILTRO, filtra los ficheros de metadatos del repositorio, junto con index.html y los indicados en .repo-ignore
#  DIR, el directorio que contiene el repositorio y donde se genera éste
#  NOMREPO, el nombre del repositorio para el html
#  REPOFIC, el fichero del repositorio
#  HTMLFIC, el fichero html del repositorio
#  TIPO, CAT, VER, DES, tipo, categoria, version y descripción del fichero

function sintaxis {
  echo "$0 [dir] [repo-name]"
  echo 
  echo "creates a repository in folder dir with name repo-name"
  echo "default: dir is current dir and repo-name is dir name"
  echo
  exit
}

function leerinfo {
  local f=$1
  DES=''
  CAT='' 
  VER=$(echo ${f#*.} | grep '^[0-9]\+\(\.[0-9]\+\)\?\(\.[0-9]\+\)\?$')
  if [ -s .$f.info ] ; then
 	DES=$(grep '^DES=\(.\+\)' $f.info | cut -d= -f 2)
 	CAT=$(grep '^CAT=\(.\+\)' $f.info | cut -d= -f 2)
 	VER=$(grep '^VER=\(.\+\)' $f.info | cut -d= -f 2)
  fi
}

[ "$1" = "-h" ] && sintaxis
[ "$1" = "--help" ] && sintaxis

DIR=$(dirname $(realpath $0))
[ $# -gt 0 ] && DIR=$1
NOMREPO=$(basename $DIR)
[ $# -gt 1 ] && NOMREPO=$2

[ -d $DIR ] || { echo "$DIR is not a directory"; exit -1; }

cd $DIR

HTMLFIC=index.html
HTMLINI="<html><head></head><body><h1>$NOMREPO Porteus repository</h1><table><tr><th>category<th>md5<th>name<th>version<th>description</tr>"
HTMLFIN="</table></body></html>"

REPOFIC=.repo
FILTROFIC=.repo-ignore
RFF="^$(echo $REPOFIC | sed -e 's/\./\\\./g')"
FILTRO="grep -v -E -e '^\..+\.info' -e '$RFF' -e '^index\.html'"


[ -f $FILTROFIC ] && FILTRO="$FILTRO | grep -E -v -f $FILTROFIC"
echo $HTMLINI > $HTMLFIC
echo > $REPOFIC
ls -1 | eval $FILTRO | while read f ; do
  [ -d "$f" ] && TIPO=d || TIPO=f
  MD5=$(md5sum "$f" | cut -d\  -f 1)
  leerinfo "$f"
  echo "<tr><td>$CAT<td>$MD5<td><a href=\"$f\">$f</a><td>$VER<td>$DES</tr>" >> $HTMLFIC
  echo "$TIPO:$MD5:$f:$VER:$DES:$CAT" >> $REPOFIC
  echo "added $f"
done
echo $HTMLFIN >> $HTMLFIC
